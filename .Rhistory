colours <-cividis(3)
v_colours <- factor(y, labels = cividis(3))
table(y, predict(housing.clmm, test, type="class")$fit)
test2<-test
test2$housing <- y
#par(mfrow(c(2,1)))
plot(predict(housing.clmm, test2, type="linear.predictor")$eta2, ylim=c(-10, 10)
, col=v_colours, pch=markers)
plot(predict(housing.clmm, test2, type="linear.predictor")$eta2, ylim=c(-100005, -99995)
, col=v_colours, pch=markers)
legend("topright", legend=c("None", "Some", "All"), col = colours, pch =c(0, 10, 25))
w1 <- which(y == 0)
plot(preds[w1, 1], col =  colours[1], pch=0)#dev.off()
w2 <- which(y == 1)
plot(preds[w2, 2], col =  colours[2], pch=10)#dev.off()
w3 <- which(y == 2)
plot(preds[w3, 3], col =  colours[3], pch=25)#dev.off()
housing.clmm
summary(housing.clmm)
confint(housing.clmm)
confusion.plot<- ggplot(confusion.frame, aes(predict(housing.clmm, test, type="class"), rev(y), fill= Freq)) +
scale_fill_viridis_c("% of state")+
geom_tile() +
geom_shadowtext(aes(label=Freq)) +
#scale_fill_gradient(high="#87ceeb", low="#e34234") +
labs(y = "True State [population in state]",x = "Predicted State (no units)") +
scale_y_discrete(labels=rev(row_names)) + # label axes
scale_x_discrete(labels=col_names)
require(ggplot2)
confusion.plot<- ggplot(confusion.frame, aes(predict(housing.clmm, test, type="class"), rev(y), fill= Freq)) +
scale_fill_viridis_c("% of state")+
geom_tile() +
geom_shadowtext(aes(label=Freq)) +
#scale_fill_gradient(high="#87ceeb", low="#e34234") +
labs(y = "True State [population in state]",x = "Predicted State (no units)") +
scale_y_discrete(labels=rev(row_names)) + # label axes
scale_x_discrete(labels=col_names)
```{r}
confusion.matrix<- table(y, predict(housing.clmm, test, type="class"))
group_pops<-rowSums(confusion.matrix)
confusion.frame <- as.data.frame(confusion.matrix/group_pops) # convert to data frame
confusion.frame$Freq <-round(confusion.frame$Freq, 3) # round to 2dp
row_names <- paste0(rownames(confusion.matrix), " [")
row_names <- paste0(row_names,  as.character(group_pops))
row_names <- paste0(row_names, "]")
row_names <- str_wrap(row_names, width = 12)
col_names <- str_wrap(colnames(confusion.matrix), 10)
require(ggplot2) # for confusion matrix plots
#require(dplyr) # matrix manipulation
require(stringr)# for fancy wrapped text in confusion matrix axis labels
require(shadowtext) #^
confusion.matrix<- table(y, predict(housing.clmm, test, type="class"))
y
length(y)
predict(housing.clmm, test, type="class")
confusion.matrix<- table(y, predict(housing.clmm, test, type="class")$fit)
group_pops<-rowSums(confusion.matrix)
confusion.frame <- as.data.frame(confusion.matrix/group_pops) # convert to data frame
confusion.frame$Freq <-round(confusion.frame$Freq, 3) # round to 2dp
row_names <- paste0(rownames(confusion.matrix), " [")
row_names <- paste0(row_names,  as.character(group_pops))
row_names <- paste0(row_names, "]")
row_names <- str_wrap(row_names, width = 12)
col_names <- str_wrap(colnames(confusion.matrix), 10)
confusion.matrix
confusion.frame
confusion.matrix<- table(y, predict(housing.clmm, test, type="class")$fit)
group_pops<-rowSums(confusion.matrix)
confusion.frame <- as.data.frame(confusion.matrix/group_pops) # convert to data frame
confusion.frame$Freq <-round(confusion.frame$Freq, 3) # round to 2dp
row_names <- paste0(rownames(confusion.matrix), " [")
row_names <- paste0(row_names,  as.character(group_pops))
row_names <- paste0(row_names, "]")
row_names <- str_wrap(row_names, width = 12)
col_names <- str_wrap(colnames(confusion.matrix), 10)
confusion.plot<- ggplot(confusion.frame, aes(Var2, rev(y), fill= Freq)) +
scale_fill_viridis_c("% of state")+
geom_tile() +
geom_shadowtext(aes(label=Freq)) +
#scale_fill_gradient(high="#87ceeb", low="#e34234") +
labs(y = "True State [population in state]",x = "Predicted State (no units)") +
scale_y_discrete(labels=rev(row_names)) + # label axes
scale_x_discrete(labels=col_names)
print(confusion.plot)
source("utils.R") # for data formatting functions and other useful globals.
require(VIM) # for missingness visualisation.
require(mice) # for mice multiple imputation.
require(lattice) # for mice imputation functions.
require(ordinal) # for clm models.
require(tidyr) # for data frame formatting.
require(viridis) # for python's nice colour palettes
require(ggplot2) # for confusion matrix plots
#require(dplyr) # matrix manipulation
require(stringr)# for fancy wrapped text in confusion matrix axis labels
require(shadowtext) #^
# load data from 2011 and format it via utils.R functions.
data_source<- "data/corrected_US/"
years <- c("2011")
file_names <- get_US_file_names(data_source, years)
data <- get_US_data(file_names)
data <- format_US_housing_data(data)
n_heating_missing <- nrow(data) - sum(complete.cases(data[,c("heating")]))
n_five_missing <- nrow(data) - sum(complete.cases(data[,c("fridge_freezer", "washing_machine", "tumble_dryer", "dishwasher", "microwave")]))
n_six_missing <- nrow(data) - sum(complete.cases(data[,c("fridge_freezer", "washing_machine", "tumble_dryer", "dishwasher", "microwave", "heating")]))
household_vars = c("fridge_freezer",
"washing_machine",
"tumble_dryer",
"dishwasher",
"microwave",
"heating")
a <- aggr(data, cex.axis=.5, oma=c(5,2,2,5),numbers=T, cex.numbers=0.5) # cex and oma adjustments so all labels show up.
b <- aggr(data[, household_vars], numbers=T, cex.axis=.5, oma=c(5,2,2,5))
is_missing_heating <- is.na(data$heating)
is_missing_five <- is.na(data$fridge_freezer)
histogram(~age|is_missing_heating, data)
histogram(~age|is_missing_five, data)
histogram(~SF.12|is_missing_heating, data)
histogram(~SF.12|is_missing_five, data)
# needs better scaling for low % missing data
# scaling works with ylim change but ticks needs relabelling.
#spineMiss(data[, c("job_sec", "heating")], col = c(blue, orange), ylim=c(0, 0.2))
#spineMiss(data[, c("job_sec", "fridge_freezer")], col = c(blue, orange), )
missing_barchart <- function(data, v1, v2){
print(v1)
print(v2)
missing_table <- table(data[,v1], is.na(data[,v2]))
# not guaranteed to be on these rows. needs forcing to correct labels somehow.
missing_percent <- missing_table[,2]/(missing_table[,1]+missing_table[,2])
barchart(missing_percent, ylab = v1)
}
missing_barchart(data, "ethnicity", "heating")
missing_barchart(data, "ethnicity", "heating")
missing_barchart(data, "depression_change", "heating")
missing_barchart(data, "education_state", "heating")
missing_barchart(data, "labour_state", "heating")
missing_barchart(data, "sex", "heating")
missing_barchart(data, "job_sec", "heating")
imp_columns <- c("five_household", "heating", "labour_state", "education_state",
"sex", "job_sec", "ethnicity", "age", "SF.12")
house_mice <- mice(data = data,
m = 10, maxit = 10, seed = 500,
remove.collinear=T)
imp_columns <- c("five_household", "heating", "labour_state", "education_state",
"sex", "job_sec", "ethnicity", "age", "SF.12", "net_hh_income")
house_mice <- mice(data = data[, imp_columns],
m = 10, maxit = 10, seed = 500,
remove.collinear=T)
data$five_household
colnames(data)
source("utils.R") # for data formatting functions and other useful globals.
require(VIM) # for missingness visualisation.
require(mice) # for mice multiple imputation.
require(lattice) # for mice imputation functions.
require(ordinal) # for clm models.
require(tidyr) # for data frame formatting.
require(viridis) # for python's nice colour palettes
require(ggplot2) # for confusion matrix plots
#require(dplyr) # matrix manipulation
require(stringr)# for fancy wrapped text in confusion matrix axis labels
require(shadowtext) #^
# load data from 2011 and format it via utils.R functions.
data_source<- "data/corrected_US/"
years <- c("2011")
file_names <- get_US_file_names(data_source, years)
data <- get_US_data(file_names)
data <- format_US_housing_data(data)
source("utils.R") # for data formatting functions and other useful globals.
require(VIM) # for missingness visualisation.
require(mice) # for mice multiple imputation.
require(lattice) # for mice imputation functions.
require(ordinal) # for clm models.
require(tidyr) # for data frame formatting.
require(viridis) # for python's nice colour palettes
require(ggplot2) # for confusion matrix plots
#require(dplyr) # matrix manipulation
require(stringr)# for fancy wrapped text in confusion matrix axis labels
require(shadowtext) #^
# load data from 2011 and format it via utils.R functions.
data_source<- "data/corrected_US/"
years <- c("2011")
file_names <- get_US_file_names(data_source, years)
data <- get_US_data(file_names)
data <- format_US_housing_data(data)
debugSource('~/minos/transitions/utils.R')
source("utils.R") # for data formatting functions and other useful globals.
require(VIM) # for missingness visualisation.
require(mice) # for mice multiple imputation.
require(lattice) # for mice imputation functions.
require(ordinal) # for clm models.
require(tidyr) # for data frame formatting.
require(viridis) # for python's nice colour palettes
require(ggplot2) # for confusion matrix plots
#require(dplyr) # matrix manipulation
require(stringr)# for fancy wrapped text in confusion matrix axis labels
require(shadowtext) #^
# load data from 2011 and format it via utils.R functions.
data_source<- "data/corrected_US/"
years <- c("2011")
file_names <- get_US_file_names(data_source, years)
data <- get_US_data(file_names)
data <- format_US_housing_data(data)
source("utils.R") # for data formatting functions and other useful globals.
require(VIM) # for missingness visualisation.
require(mice) # for mice multiple imputation.
require(lattice) # for mice imputation functions.
require(ordinal) # for clm models.
require(tidyr) # for data frame formatting.
require(viridis) # for python's nice colour palettes
require(ggplot2) # for confusion matrix plots
#require(dplyr) # matrix manipulation
require(stringr)# for fancy wrapped text in confusion matrix axis labels
require(shadowtext) #^
# load data from 2011 and format it via utils.R functions.
data_source<- "data/corrected_US/"
years <- c("2011")
file_names <- get_US_file_names(data_source, years)
data <- get_US_data(file_names)
data <- format_US_housing_data(data)
n_heating_missing <- nrow(data) - sum(complete.cases(data[,c("heating")]))
n_five_missing <- nrow(data) - sum(complete.cases(data[,c("fridge_freezer", "washing_machine", "tumble_dryer", "dishwasher", "microwave")]))
n_six_missing <- nrow(data) - sum(complete.cases(data[,c("fridge_freezer", "washing_machine", "tumble_dryer", "dishwasher", "microwave", "heating")]))
household_vars = c("fridge_freezer",
"washing_machine",
"tumble_dryer",
"dishwasher",
"microwave",
"heating")
a <- aggr(data, cex.axis=.5, oma=c(5,2,2,5),numbers=T, cex.numbers=0.5) # cex and oma adjustments so all labels show up.
b <- aggr(data[, household_vars], numbers=T, cex.axis=.5, oma=c(5,2,2,5))
is_missing_heating <- is.na(data$heating)
is_missing_five <- is.na(data$fridge_freezer)
histogram(~age|is_missing_heating, data)
histogram(~age|is_missing_five, data)
histogram(~SF.12|is_missing_heating, data)
histogram(~SF.12|is_missing_five, data)
# needs better scaling for low % missing data
# scaling works with ylim change but ticks needs relabelling.
#spineMiss(data[, c("job_sec", "heating")], col = c(blue, orange), ylim=c(0, 0.2))
#spineMiss(data[, c("job_sec", "fridge_freezer")], col = c(blue, orange), )
missing_barchart <- function(data, v1, v2){
print(v1)
print(v2)
missing_table <- table(data[,v1], is.na(data[,v2]))
# not guaranteed to be on these rows. needs forcing to correct labels somehow.
missing_percent <- missing_table[,2]/(missing_table[,1]+missing_table[,2])
barchart(missing_percent, ylab = v1)
}
missing_barchart(data, "ethnicity", "heating")
missing_barchart(data, "ethnicity", "heating")
missing_barchart(data, "depression_change", "heating")
missing_barchart(data, "education_state", "heating")
missing_barchart(data, "labour_state", "heating")
missing_barchart(data, "sex", "heating")
missing_barchart(data, "job_sec", "heating")
imp_columns <- c("five_household", "heating", "labour_state", "education_state",
"sex", "job_sec", "ethnicity", "age", "SF.12", "net_hh_income")
house_mice <- mice(data = data[, imp_columns],
m = 10, maxit = 10, seed = 500,
remove.collinear=T)
imp_columns <- c("five_household", "heating", "labour_state", "education_state",
"sex", "job_sec", "ethnicity", "age", "SF.12", "hh_netinc")
house_mice <- mice(data = data[, imp_columns],
m = 10, maxit = 10, seed = 500,
remove.collinear=T)
print(summary(complete(house_mice)[,c("five_household","heating")]))
plot(house_mice)
data2<- complete(house_mice)
data2 <- tidyr::drop_na(data2)
# format final housing composite. If they have no appliances assign 0.
# any up to 5 assign 1.
# all assign 2.
data2$housing <- rowSums(data2[, c("five_household", "heating")])
data2[which(data2$housing <= 0), "housing"] <- 0
data2[which(data2$housing <= 5 & data2$housing > 1), "housing"] <- 1
data2[which(data2$housing >= 6), "housing"] <- 2
data2$housing <- factor(data2$housing, levels = c(0,1,2))
n <- nrow(data2)
set.seed(88)
Inx <- sample(n, 0.8*n)
train<-data2[Inx,]
test<-data2[-Inx,]
y <- test$housing
test <- subset(test, select= - housing)
formula <- "housing ~ factor(sex) +
age +
SF.12 +
factor(labour_state) +
factor(job_sec)"
housing.clmm <- clm(housing ~ (factor(sex) +
factor(education_state) +
age +
SF.12 +
factor(labour_state) +
factor(job_sec) +
factor(ethnicity) + hh_netinc + alcohol_spending)**2,
data= train[complete.cases(train),],
link = "logit",
threshold = "flexible",
Hess=T)
data2<- complete(house_mice)
data2 <- tidyr::drop_na(data2)
# format final housing composite. If they have no appliances assign 0.
# any up to 5 assign 1.
# all assign 2.
data2$housing <- rowSums(data2[, c("five_household", "heating")])
data2[which(data2$housing <= 0), "housing"] <- 0
data2[which(data2$housing <= 5 & data2$housing > 1), "housing"] <- 1
data2[which(data2$housing >= 6), "housing"] <- 2
data2$housing <- factor(data2$housing, levels = c(0,1,2))
n <- nrow(data2)
set.seed(88)
Inx <- sample(n, 0.8*n)
train<-data2[Inx,]
test<-data2[-Inx,]
y <- test$housing
test <- subset(test, select= - housing)
formula <- "housing ~ factor(sex) +
age +
SF.12 +
factor(labour_state) +
factor(job_sec)"
housing.clmm <- clm(housing ~ (factor(sex) +
factor(education_state) +
age +
SF.12 +
factor(labour_state) +
factor(job_sec) +
factor(ethnicity) + hh_netinc)**2,
data= train[complete.cases(train),],
link = "logit",
threshold = "flexible",
Hess=T)
housing.clmm
data2<- complete(house_mice)
data2 <- tidyr::drop_na(data2)
# format final housing composite. If they have no appliances assign 0.
# any up to 5 assign 1.
# all assign 2.
data2$housing <- rowSums(data2[, c("five_household", "heating")])
data2[which(data2$housing <= 0), "housing"] <- 0
data2[which(data2$housing <= 5 & data2$housing > 1), "housing"] <- 1
data2[which(data2$housing >= 6), "housing"] <- 2
data2$housing <- factor(data2$housing, levels = c(0,1,2))
n <- nrow(data2)
set.seed(88)
Inx <- sample(n, 0.8*n)
train<-data2[Inx,]
test<-data2[-Inx,]
y <- test$housing
test <- subset(test, select= - housing)
formula <- "housing ~ factor(sex) +
age +
SF.12 +
factor(labour_state) +
factor(job_sec)"
housing.clmm <- clm(housing ~ (factor(sex) +
factor(education_state) +
age +
SF.12 +
factor(labour_state) +
factor(job_sec) +
factor(ethnicity) + hh_netinc),
data= train[complete.cases(train),],
link = "logit",
threshold = "flexible",
Hess=T)
print(summary(housing.clmm))
prs<- 1 - logLik(housing.clmm)/logLik(clm2(housing ~ 1,data= train))
print(prs)
# remove housing column or predict function doesnt give full multinom probabilities.
preds <- predict(housing.clmm, test)$fit
markers <-as.numeric(as.character(factor(y, labels = c(0, 10, 25))))
markers <- as.integer(markers)
colours <-cividis(3)
v_colours <- factor(y, labels = cividis(3))
table(y, predict(housing.clmm, test, type="class")$fit)
test2<-test
test2$housing <- y
#par(mfrow(c(2,1)))
plot(predict(housing.clmm, test2, type="linear.predictor")$eta2, ylim=c(-10, 10)
, col=v_colours, pch=markers)
plot(predict(housing.clmm, test2, type="linear.predictor")$eta2, ylim=c(-100005, -99995)
, col=v_colours, pch=markers)
legend("topright", legend=c("None", "Some", "All"), col = colours, pch =c(0, 10, 25))
w1 <- which(y == 0)
plot(preds[w1, 1], col =  colours[1], pch=0)#dev.off()
w2 <- which(y == 1)
plot(preds[w2, 2], col =  colours[2], pch=10)#dev.off()
w3 <- which(y == 2)
plot(preds[w3, 3], col =  colours[3], pch=25)#dev.off()
confusion.matrix<- table(y, predict(housing.clmm, test, type="class")$fit)
group_pops<-rowSums(confusion.matrix)
confusion.frame <- as.data.frame(confusion.matrix/group_pops) # convert to data frame
confusion.frame$Freq <-round(confusion.frame$Freq, 3) # round to 2dp
row_names <- paste0(rownames(confusion.matrix), " [")
row_names <- paste0(row_names,  as.character(group_pops))
row_names <- paste0(row_names, "]")
row_names <- str_wrap(row_names, width = 12)
col_names <- str_wrap(colnames(confusion.matrix), 10)
confusion.plot<- ggplot(confusion.frame, aes(Var2, rev(y), fill= Freq)) +
scale_fill_viridis_c("% of state")+
geom_tile() +
geom_shadowtext(aes(label=Freq)) +
#scale_fill_gradient(high="#87ceeb", low="#e34234") +
labs(y = "True State [population in state]",x = "Predicted State (no units)") +
scale_y_discrete(labels=rev(row_names)) + # label axes
scale_x_discrete(labels=col_names)
print(confusion.plot)
data2<- complete(house_mice)
data2 <- tidyr::drop_na(data2)
# format final housing composite. If they have no appliances assign 0.
# any up to 5 assign 1.
# all assign 2.
data2$housing <- rowSums(data2[, c("five_household", "heating")])
data2[which(data2$housing <= 0), "housing"] <- 0
data2[which(data2$housing <= 5 & data2$housing > 1), "housing"] <- 1
data2[which(data2$housing >= 6), "housing"] <- 2
data2$housing <- factor(data2$housing, levels = c(0,1,2))
n <- nrow(data2)
set.seed(88)
Inx <- sample(n, 0.8*n)
train<-data2[Inx,]
test<-data2[-Inx,]
y <- test$housing
test <- subset(test, select= - housing)
formula <- "housing ~ factor(sex) +
age +
SF.12 +
factor(labour_state) +
factor(job_sec)"
housing.clmm <- clm(housing ~ (factor(sex) +
factor(education_state) +
age +
SF.12 +
factor(labour_state) +
factor(job_sec) +
factor(ethnicity) + hh_netinc)**2,
data= train[complete.cases(train),],
link = "logit",
threshold = "flexible",
Hess=T)
a <- seq(0, 5, 1/1000)
b <- log(a+1) + (1-log(2))
plot(a, b, type="l", xlab = "Proportion of Household Spending Money", ylab = "SF-12 Mean")
b <- log(2*a+1) + (1-log(2))
plot(a, b, type="l", xlab = "Proportion of Household Spending Money", ylab = "SF-12 Mean")
b <- log(2*a+1) + (1-log(5))
plot(a, b, type="l", xlab = "Proportion of Household Spending Money", ylab = "SF-12 Mean")
b <- log(2*a+1) + (1-log(3))
plot(a, b, type="l", xlab = "Proportion of Household Spending Money", ylab = "SF-12 Mean")
b <- log(5*a+1) + (1-log(3))
plot(a, b, type="l", xlab = "Proportion of Household Spending Money", ylab = "SF-12 Mean")
b <- log(25*a+1) + (1-log(3))
plot(a, b, type="l", xlab = "Proportion of Household Spending Money", ylab = "SF-12 Mean")
b <- log(25*a+1) + (1-log(26))
plot(a, b, type="l", xlab = "Proportion of Household Spending Money", ylab = "SF-12 Mean")
b <- log(25*a+1) + (1-log(26)) + 50
plot(a, b, type="l", xlab = "Proportion of Household Spending Money", ylab = "SF-12 Mean")
b <- log(100*a+1) + (1-log(101)) + 50
plot(a, b, type="l", xlab = "Proportion of Household Spending Money", ylab = "SF-12 Mean")
b
b <- log(100*a+1) + (1-log(101)) + 49
plot(a, b, type="l", xlab = "Proportion of Household Spending Money", ylab = "SF-12 Mean")
?plot_summs
library(lme4)
?plot_summs
??plot_summs
install.package("jtools")
install.packages("jtools")
library(jtools)
sf12.lm <- lm(SF.12 ~ factor(sex) +
factor(ethnicity) +
age +
factor(education_state) +
factor(labour_state) +
factor(job_sec) +
factor(region) +
gross_hh_income,
data= train)
sf12.lm <- lm(SF.12 ~ factor(sex) +
factor(ethnicity) +
age +
factor(education_state) +
factor(labour_state) +
factor(job_sec) +
gross_hh_income,
data= train)
sf12.lm <- lm(SF.12 ~ factor(sex) +
factor(ethnicity) +
age +
factor(education_state) +
factor(labour_state) +
factor(job_sec) +
hh_netinc,
data= train)
preds <- predict(sf12.lm, test)
a<- summary(sf12.lm)
print(a)
print(a$adj.r.squared)
pdf("../plots/SF12_residuals.pdf")
plot(residuals(sf12.lm))
dev.off()
plot_summs(sf12.lm)
instal.packages("ggstance")
install.packages("ggstance")
plot_summs(sf12.lm)
plot_summs(housing.clmm)
install.packages("ggstance")
install.packages("ggstance")
plot_summs(housing.clmm)
library(jtools)
source("~/minos/transitions/housing/Housing_clm.R")
