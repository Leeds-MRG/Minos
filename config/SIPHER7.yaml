randomness:
    key_columns: ['entrance_time', 'age']
time:
    start: {year: 2020, month: 10, day: 15}
    end:   {year: 2038, month: 10, day: 15}
    step_size: 365.25  # Days
    num_years: 18
population:
    age_start: 0
    age_end: 100

#mortality_file: 'regional_Mortality2011_LEEDS1_2.csv'
#fertility_file: 'regional_Fertility2011_LEEDS1_2.csv'
mortality_file: 'regional_mortality_2011_2061.csv'
fertility_file: 'regional_fertility_2011_2061.csv'

input_data_dir: "data/final_US"
persistent_data_dir: "persistent_data"
output_data_dir: "output"

transition_dir: 'data/transitions'
replenishing_dir: 'data/replenishing'

# REALLY IMPORTANT NOTE FOR THE LOVE OF GOD READ ME.
# The order of these listed components is important. They are initialised last one in first one off.
# All other components need the replenishment module which loads in real cohort data.
# The Replenishment component must be listed LAST here no matter what as it is the FIRST module used. (priority 0)
# Only if Replenishment needs some other module in the future would it be superceded.
# Similarly Mortality requires Replenishment but everything else requires Mortality so it goes second. (priority 1)
# Finally everything else can go in any order (priority 2+).
#components : [MWB(), Loneliness(), Tobacco(), Alcohol(), Neighbourhood(), Income(), Housing(), Labour(), Nutrition(), Education(), Mortality(), nkidsFertilityAgeSpecificRates(), Replenishment()]
components : [S7EquivalentIncome(), Loneliness(), S7Neighbourhood(), S7Housing(), S7PhysicalHealth(), S7MentalHealth(), S7Labour(), Income(), Education(), Mortality(), Replenishment(), nkidsFertilityAgeSpecificRates()]


scale_rates:
    method: "constant"
    constant:
        education: 1
        mortality: 1
        fertility: 1

