# config file for parallel runs on beefy. Run as one big job with multiprocessing rather than batches through slurm.
randomness: # Columns used in generation of CRN. need to find out what this actually does.
    key_columns: ['entrance_time', 'age']
input_data:
    location: 'UK' # again not sure why this is needed.
time: # how long does the simulation run for. Has the start/end times. How long is a step and how many years does the model run.
    start: {year: 2011, month: 10, day: 15} # Can probably derive these from start and n_steps instead.
    end:   {year: 2016, month: 10, day: 15}
    step_size: 365.25  # Days
    num_years: 5
population:
    age_start: 0 # used to randomly generate ages for synthetic pop. Can probably remove.
    age_end: 100

replenishment_files_source: # local mount for US data when using docker image.
      "/home/docker/MINOS/UKDA-6614-stata/stata/stata13_se/"

mortality_file: 'regional_Mortality2011_LEEDS1_2.csv' # nomis mortality rate tables by age sex eth.
fertility_file: 'regional_Fertility2011_LEEDS1_2.csv' # nomis fertility rate tables by age sex eth.
input_data_dir: 'data/final_US' # Where is cohort data saved after preprocessing.
persistent_data_dir: 'persistent_data' # Where is any persistent data saved.
output_data_dir: 'output' # Where is output data saved to.
output_destination: 'baseline' # Further specify the output data is saved to. E.g. running multiple models may need separate folders to prevent overwriting.

# REALLY IMPORTANT NOTE FOR THE LOVE OF GOD READ ME.
# The order of these listed components is important. They are initialised last one in first one off.
# All other components need the replenishment module which loads in real cohort data.
# The Replenishment component must be listed LAST here no matter what as it is the FIRST module used. (priority 0)
# Only if Replenishment needs some other module in the future would it be superceded.
# Similarly Mortality requires Replenishment but everything else requires Mortality so it goes second. Not much use changing jobs if you're dead.(priority 1)
# Finally everything else can go in any order (priority 2).
components : [MWB(), Tobacco(), Alcohol(), Neighbourhood(), Housing(), Fertility(), Mortality(), Replenishment()]
#components : [MWB(), Tobacco(), Alcohol(), Neighbourhood(), Housing(), Fertility(), Mortality(), hhIncomeIntervention(), Replenishment()]
#components : [MWB(), Tobacco(), Alcohol(), Neighbourhood(), Housing(), Fertility(), Mortality(), hhIncomeChildUplift(), Replenishment()]
#components : [MWB(), Tobacco(), Alcohol(), Neighbourhood(), Housing(), Fertility(), Mortality(), hhIncomePovertyLineChildUplift(), Replenishment()]

scale_rates:
    # methods:
    # constant: all rates regardless of age/sex/... will be multiplied by the specified factor
    #           if 1, the original rates will be usd
    # these are essentially used to inflate rates in certain scenarios. E.g. employment decrease.
    method: "constant"
    constant:
        education: 1
        mortality: 1
        fertility: 1